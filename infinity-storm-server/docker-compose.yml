version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: infinity_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-infinity_storm}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-infinity_storm_dev}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "${POSTGRES_PORT:-54321}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - infinity_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-infinity_storm}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: infinity_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - infinity_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-infinity_redis_dev}

  # Web Portal (Authentication Frontend)
  web-portal:
    build:
      context: .
      dockerfile: docker/web-portal/Dockerfile
    container_name: infinity_web_portal
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${WEB_PORTAL_PORT:-3001}
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-infinity_storm_dev}@postgres:5432/${POSTGRES_DB:-infinity_storm}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-infinity_redis_dev}@redis:6379
      - JWT_SECRET=${JWT_SECRET:-dev_jwt_secret_change_in_production}
      - GAME_SERVER_URL=http://game-server:${GAME_SERVER_PORT:-3000}
    ports:
      - "${WEB_PORTAL_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - infinity_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - ./web-portal:/app/web-portal:ro
      - /app/web-portal/node_modules

  # Game Server (Game Logic Backend)
  game-server:
    build:
      context: .
      dockerfile: docker/game-server/Dockerfile
    container_name: infinity_game_server
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${GAME_SERVER_PORT:-3000}
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-infinity_storm_dev}@postgres:5432/${POSTGRES_DB:-infinity_storm}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-infinity_redis_dev}@redis:6379
      - JWT_SECRET=${JWT_SECRET:-dev_jwt_secret_change_in_production}
      - WEB_PORTAL_URL=http://web-portal:${WEB_PORTAL_PORT:-3001}
    ports:
      - "${GAME_SERVER_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - infinity_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - .:/app:ro
      - /app/node_modules

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: infinity_nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web-portal
      - game-server
    networks:
      - infinity_network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

networks:
  infinity_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:



